(module $wasm
  (typename $f1 (flags $a $b))
  (typename $f2 (flags (@witx repr u64) $c $d $e))
  (typename $r1 (record (field $a u8) (field $b $f1)))
  (typename $e1 (enum $a $b))

  ;; Variants for testing casting between primitive types
  (typename $c1 (variant (case $a s32) (case $b s64)))
  (typename $c2 (variant (case $a s32) (case $b f32)))
  (typename $c3 (variant (case $a s32) (case $b f64)))
  (typename $c4 (variant (case $a s64) (case $b f32)))
  (typename $c5 (variant (case $a s64) (case $b f64)))
  (typename $c6 (variant (case $a f32) (case $b f64)))
  (typename $casts (tuple $c1 $c2 $c3 $c4 $c5 $c6))

  ;; Variants for testing zeros can be synthesized
  (typename $z1 (variant (case $a s32) (case $b)))
  (typename $z2 (variant (case $a s64) (case $b)))
  (typename $z3 (variant (case $a f32) (case $b)))
  (typename $z4 (variant (case $a f64) (case $b)))
  (typename $zeros (tuple $z1 $z2 $z3 $z4))

  (typename $option_typedef (option u32))
  (typename $bool_typedef bool)
  (typename $result_typedef (expected u32 (error)))

  (typename $list_in_record1 (record (field $a string)))
  (typename $list_in_record2 (record (field $a string)))
  (typename $list_in_record3 (record (field $a string)))
  (typename $list_in_record4 (record (field $a string)))

  (typename $list_in_variant1_1 (option string))
  (typename $list_in_variant1_2 (expected (error string)))
  (typename $list_in_variant1_3 (union string f32))
  (typename $list_in_variant2 (option string))
  (typename $list_in_variant3 (option string))

  (typename $my_errno (enum $success $a $b))

  (typename $list_in_alias $list_in_record4)
  (typename $list_typedef string)
  (typename $list_typedef2 (list u8))
  (typename $list_typedef3 (list string))

  (resource $r0)
  (typename $wasm_state (handle $r0))
  (resource $r1)
  (typename $wasm_state2 (handle $r1))

  (typename $wasm_state_param_record (record (field $a $wasm_state2)))
  (typename $wasm_state_param_tuple (tuple $wasm_state2))
  (typename $wasm_state_param_option (option $wasm_state2))
  (typename $wasm_state_param_result (expected $wasm_state2 (error u32)))
  (typename $wasm_state_param_variant (union $wasm_state2 u32))

  (typename $wasm_state_result_record (record (field $a $wasm_state2)))
  (typename $wasm_state_result_tuple (tuple $wasm_state2))
  (typename $wasm_state_result_option (option $wasm_state2))
  (typename $wasm_state_result_result (expected $wasm_state2 (error u32)))
  (typename $wasm_state_result_variant (union $wasm_state2 u32))

  (typename $buffer_in_variant (variant
    (case $a (in-buffer u8))
    (case $b (out-buffer u8))
    (case $c (in-buffer bool))
    (case $d (out-buffer bool))
  ))

  (typename $buffer_in_record (record
    (field $a (in-buffer u8))
    (field $b (out-buffer u8))
    (field $c (in-buffer bool))
    (field $d (out-buffer bool))
    (field $e $buffer_in_variant)
  ))

  (typename $param_in_buffer_u8 (in-buffer u8))
  (typename $param_out_buffer_u8 (out-buffer u8))
  (typename $param_in_buffer_bool (in-buffer bool))
  (typename $param_out_buffer_bool (out-buffer bool))

  (export "run_import_tests" (func))
  (export "allocated_bytes" (func (result $a u32)))

  ;; ===========================================
  ;; scalars
  ;; ===========================================

  (export "roundtrip_u8" (func (param $a u8) (result $b u8)))
  (export "roundtrip_s8" (func (param $a s8) (result $b s8)))
  (export "roundtrip_u16" (func (param $a u16) (result $b u16)))
  (export "roundtrip_s16" (func (param $a s16) (result $b s16)))
  (export "roundtrip_u32" (func (param $a u32) (result $b u32)))
  (export "roundtrip_s32" (func (param $a s32) (result $b s32)))
  (export "roundtrip_u64" (func (param $a u64) (result $b u64)))
  (export "roundtrip_s64" (func (param $a s64) (result $b s64)))
  (export "roundtrip_f32" (func (param $a f32) (result $b f32)))
  (export "roundtrip_f64" (func (param $a f64) (result $b f64)))
  (export "roundtrip_char" (func (param $a char) (result $b char)))
  (export "multiple_results" (func (result $a u8) (result $b u16)))
  (export "set_scalar" (func (param $a u32)))
  (export "get_scalar" (func (result $a u32)))

  ;; ===========================================
  ;; records
  ;; ===========================================

  (export "swap_tuple" (func (param $a (tuple u8 u32)) (result $b (tuple u32 u8))))
  (export "roundtrip_flags1" (func (param $a $f1) (result $b $f1)))
  (export "roundtrip_flags2" (func (param $a $f2) (result $b $f2)))
  (export "roundtrip_record1" (func (param $a $r1) (result $b $r1)))
  (export "tuple0" (func (param $a (tuple)) (result $b (tuple))))
  (export "tuple1" (func (param $a (tuple u8)) (result $b (tuple u8))))

  ;; ===========================================
  ;; variants
  ;; ===========================================

  (export "roundtrip_option" (func (param $a (option f32)) (result $b (option u8))))
  (export "roundtrip_result" (func
    (param $a (expected u32 (error f32)))
    (result $b (expected f64 (error u8)))
  ))
  (export "roundtrip_enum" (func (param $a $e1) (result $b $e1)))
  (export "invert_bool" (func (param $a bool) (result $b bool)))
  (export "variant_casts" (func (param $a $casts) (result $b $casts)))
  (export "variant_zeros" (func (param $a $zeros) (result $b $zeros)))
  (export "variant_typedefs" (func
    (param $a $option_typedef)
    (param $b $bool_typedef)
    (param $c $result_typedef)
  ))

  ;; ===========================================
  ;; lists
  ;; ===========================================
  (export "list_param" (func (param $a (list u8))))
  (export "list_param2" (func (param $a string)))
  (export "list_param3" (func (param $a (list string))))
  (export "list_param4" (func (param $a (list (list string)))))
  (export "list_result" (func (result $a (list u8))))
  (export "list_result2" (func (result $a string)))
  (export "list_result3" (func (result $a (list string))))

  ;; ===========================================
  ;; handles
  ;; ===========================================
  (export "wasm_state_create" (func (result $a $wasm_state)))
  (export "wasm_state_get" (func (param $a $wasm_state) (result $b u32)))
  (export "wasm_state2_create" (func (result $b $wasm_state2)))
  (export "wasm_state2_close" (func (param $a $wasm_state2)))
  (export "wasm_state2_saw_close" (func (result $a bool)))

  (export "two_wasm_states" (func
    (param $a $wasm_state)
    (param $b $wasm_state2)
    (result $c $wasm_state)
    (result $d $wasm_state2)
  ))

  (export "wasm_state2_param_record" (func (param $a $wasm_state_param_record)))
  (export "wasm_state2_param_tuple" (func (param $a $wasm_state_param_tuple)))
  (export "wasm_state2_param_option" (func (param $a $wasm_state_param_option)))
  (export "wasm_state2_param_result" (func (param $a $wasm_state_param_result)))
  (export "wasm_state2_param_variant" (func (param $a $wasm_state_param_variant)))
  (export "wasm_state2_param_list" (func (param $a (list $wasm_state2))))

  (export "wasm_state2_result_record" (func (result $a $wasm_state_result_record)))
  (export "wasm_state2_result_tuple" (func (result $a $wasm_state_result_tuple)))
  (export "wasm_state2_result_option" (func (result $a $wasm_state_result_option)))
  (export "wasm_state2_result_result" (func (result $a $wasm_state_result_result)))
  (export "wasm_state2_result_variant" (func (result $a $wasm_state_result_variant)))
  (export "wasm_state2_result_list" (func (result $a (list $wasm_state2))))

  ;; ===========================================
  ;; buffers
  ;; ===========================================
  (export "buffer_u8" (func (param $a (in-buffer u8)) (param $b (out-buffer u8)) (result $r u32)))
  (export "buffer_u32" (func (param $a (in-buffer u32)) (param $b (out-buffer u32)) (result $r u32)))
  (export "buffer_bool" (func (param $a (in-buffer bool)) (param $b (out-buffer bool)) (result $r u32)))
  (export "buffer_string" (func (param $a (in-buffer string)) (param $b (out-buffer string)) (result $r u32)))
  (export "buffer_list_bool" (func (param $a (in-buffer (list bool))) (param $b (out-buffer (list bool))) (result $r u32)))
  ;; TODO: somehow get this working in wasmtime
  ;;(export "buffer_buffer_bool" (func (param $a (in-buffer (in-buffer bool)))))
  (export "buffer_mutable1" (func (param $a (list (in-buffer bool)))))
  (export "buffer_mutable2" (func (param $a (list (out-buffer u8))) (result $r u32)))
  (export "buffer_mutable3" (func (param $a (list (out-buffer bool))) (result $r u32)))
  (export "buffer_in_record" (func (param $a $buffer_in_record)))
  (export "buffer_typedef" (func
    (param $a $param_in_buffer_u8)
    (param $b $param_out_buffer_u8)
    (param $c $param_in_buffer_bool)
    (param $d $param_out_buffer_bool)
  ))

  ;; ===========================================
  ;; More flavorful types
  ;; ===========================================
  (export "list_in_record1" (func (param $a $list_in_record1)))
  (export "list_in_record2" (func (result $a $list_in_record2)))
  (export "list_in_record3" (func (param $a $list_in_record3) (result $b $list_in_record3)))
  (export "list_in_record4" (func (param $a $list_in_alias) (result $b $list_in_alias)))

  (export "list_in_variant1" (func
    (param $a $list_in_variant1_1)
    (param $b $list_in_variant1_2)
    (param $c $list_in_variant1_3)
  ))
  (export "list_in_variant2" (func (result $a $list_in_variant2)))
  (export "list_in_variant3" (func (param $a $list_in_variant3) (result $b $list_in_variant3)))

  (export "errno_result" (func (result $a (expected (error $my_errno)))))

  (export "list_typedefs" (func
    (param $a $list_typedef)
    (param $c $list_typedef3)
    (result $r1 $list_typedef2)
    (result $r2 $list_typedef3)
  ))
)
